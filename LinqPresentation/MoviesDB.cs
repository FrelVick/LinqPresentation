#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


public partial class LinqDB : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertDirector(Director instance);
  partial void UpdateDirector(Director instance);
  partial void DeleteDirector(Director instance);
  partial void InsertMovy(Movie instance);
  partial void UpdateMovy(Movie instance);
  partial void DeleteMovy(Movie instance);
  partial void InsertPeople(People instance);
  partial void UpdatePeople(People instance);
  partial void DeletePeople(People instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  #endregion
	
	public LinqDB(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqDB(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Director> Directors
	{
		get
		{
			return this.GetTable<Director>();
		}
	}
	
	public System.Data.Linq.Table<Movie> Movies
	{
		get
		{
			return this.GetTable<Movie>();
		}
	}
	
	public System.Data.Linq.Table<People> Peoples
	{
		get
		{
			return this.GetTable<People>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directors")]
public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _PeopleId;
	
	private int _FilmId;
	
	private EntityRef<Movie> _Movy;
	
	private EntityRef<People> _People;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPeopleIdChanging(int value);
    partial void OnPeopleIdChanged();
    partial void OnFilmIdChanging(int value);
    partial void OnFilmIdChanged();
    #endregion
	
	public Director()
	{
		this._Movy = default(EntityRef<Movie>);
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeopleId", DbType="Int NOT NULL")]
	public int PeopleId
	{
		get
		{
			return this._PeopleId;
		}
		set
		{
			if ((this._PeopleId != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIdChanging(value);
				this.SendPropertyChanging();
				this._PeopleId = value;
				this.SendPropertyChanged("PeopleId");
				this.OnPeopleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilmId", DbType="Int NOT NULL")]
	public int FilmId
	{
		get
		{
			return this._FilmId;
		}
		set
		{
			if ((this._FilmId != value))
			{
				if (this._Movy.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFilmIdChanging(value);
				this.SendPropertyChanging();
				this._FilmId = value;
				this.SendPropertyChanged("FilmId");
				this.OnFilmIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Directors_ToMovies", Storage="_Movy", ThisKey="FilmId", OtherKey="Id", IsForeignKey=true)]
	public Movie Movie
	{
		get
		{
			return this._Movy.Entity;
		}
		set
		{
			Movie previousValue = this._Movy.Entity;
			if (((previousValue != value) 
						|| (this._Movy.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Movy.Entity = null;
					previousValue.Directors.Remove(this);
				}
				this._Movy.Entity = value;
				if ((value != null))
				{
					value.Directors.Add(this);
					this._FilmId = value.Id;
				}
				else
				{
					this._FilmId = default(int);
				}
				this.SendPropertyChanged("Movie");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Directors_ToPeoples", Storage="_People", ThisKey="PeopleId", OtherKey="Id", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Directors.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Directors.Add(this);
					this._PeopleId = value.Id;
				}
				else
				{
					this._PeopleId = default(int);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _Year;
	
	private int _Length;
	
	private EntitySet<Director> _Directors;
	
	private EntitySet<Role> _Roles;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    #endregion
	
	public Movie()
	{
		this._Directors = new EntitySet<Director>(new Action<Director>(this.attach_Directors), new Action<Director>(this.detach_Directors));
		this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
	public int Length
	{
		get
		{
			return this._Length;
		}
		set
		{
			if ((this._Length != value))
			{
				this.OnLengthChanging(value);
				this.SendPropertyChanging();
				this._Length = value;
				this.SendPropertyChanged("Length");
				this.OnLengthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Directors_ToMovies", Storage="_Directors", ThisKey="Id", OtherKey="FilmId", DeleteRule="NO ACTION")]
	public EntitySet<Director> Directors
	{
		get
		{
			return this._Directors;
		}
		set
		{
			this._Directors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Role_ToMovie", Storage="_Roles", ThisKey="Id", OtherKey="FilmId", DeleteRule="NO ACTION")]
	public EntitySet<Role> Roles
	{
		get
		{
			return this._Roles;
		}
		set
		{
			this._Roles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Directors(Director entity)
	{
		this.SendPropertyChanging();
		entity.Movie = this;
	}
	
	private void detach_Directors(Director entity)
	{
		this.SendPropertyChanging();
		entity.Movie = null;
	}
	
	private void attach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.Movie = this;
	}
	
	private void detach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.Movie = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Peoples")]
public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Surname;
	
	private EntitySet<Director> _Directors;
	
	private EntitySet<Role> _Roles;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
	
	public People()
	{
		this._Directors = new EntitySet<Director>(new Action<Director>(this.attach_Directors), new Action<Director>(this.detach_Directors));
		this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
	public string Surname
	{
		get
		{
			return this._Surname;
		}
		set
		{
			if ((this._Surname != value))
			{
				this.OnSurnameChanging(value);
				this.SendPropertyChanging();
				this._Surname = value;
				this.SendPropertyChanged("Surname");
				this.OnSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Directors_ToPeoples", Storage="_Directors", ThisKey="Id", OtherKey="PeopleId", DeleteRule="NO ACTION")]
	public EntitySet<Director> Directors
	{
		get
		{
			return this._Directors;
		}
		set
		{
			this._Directors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Role_ToPeoples", Storage="_Roles", ThisKey="Id", OtherKey="PeopleId", DeleteRule="NO ACTION")]
	public EntitySet<Role> Roles
	{
		get
		{
			return this._Roles;
		}
		set
		{
			this._Roles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Directors(Director entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Directors(Director entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
	
	private void attach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _FilmId;
	
	private int _PeopleId;
	
	private string _Role1;
	
	private EntityRef<Movie> _Movy;
	
	private EntityRef<People> _People;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilmIdChanging(int value);
    partial void OnFilmIdChanged();
    partial void OnPeopleIdChanging(int value);
    partial void OnPeopleIdChanged();
    partial void OnRole1Changing(string value);
    partial void OnRole1Changed();
    #endregion
	
	public Role()
	{
		this._Movy = default(EntityRef<Movie>);
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilmId", DbType="Int NOT NULL")]
	public int FilmId
	{
		get
		{
			return this._FilmId;
		}
		set
		{
			if ((this._FilmId != value))
			{
				if (this._Movy.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFilmIdChanging(value);
				this.SendPropertyChanging();
				this._FilmId = value;
				this.SendPropertyChanged("FilmId");
				this.OnFilmIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeopleId", DbType="Int NOT NULL")]
	public int PeopleId
	{
		get
		{
			return this._PeopleId;
		}
		set
		{
			if ((this._PeopleId != value))
			{
				if (this._People.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPeopleIdChanging(value);
				this.SendPropertyChanging();
				this._PeopleId = value;
				this.SendPropertyChanged("PeopleId");
				this.OnPeopleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Role", Storage="_Role1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Role1
	{
		get
		{
			return this._Role1;
		}
		set
		{
			if ((this._Role1 != value))
			{
				this.OnRole1Changing(value);
				this.SendPropertyChanging();
				this._Role1 = value;
				this.SendPropertyChanged("Role1");
				this.OnRole1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Role_ToMovie", Storage="_Movy", ThisKey="FilmId", OtherKey="Id", IsForeignKey=true)]
	public Movie Movie
	{
		get
		{
			return this._Movy.Entity;
		}
		set
		{
			Movie previousValue = this._Movy.Entity;
			if (((previousValue != value) 
						|| (this._Movy.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Movy.Entity = null;
					previousValue.Roles.Remove(this);
				}
				this._Movy.Entity = value;
				if ((value != null))
				{
					value.Roles.Add(this);
					this._FilmId = value.Id;
				}
				else
				{
					this._FilmId = default(int);
				}
				this.SendPropertyChanged("Movie");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Role_ToPeoples", Storage="_People", ThisKey="PeopleId", OtherKey="Id", IsForeignKey=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Roles.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Roles.Add(this);
					this._PeopleId = value.Id;
				}
				else
				{
					this._PeopleId = default(int);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
